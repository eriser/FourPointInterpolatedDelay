/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "FourPointDelay.h"
#include "HanningWindow.h"
#include "TukeyWindow.h"


//==============================================================================
/**
*/
class FourPointDelayAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    FourPointDelayAudioProcessor();
    ~FourPointDelayAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    enum Parameters{
        knob1Param=0,
        knob2Param,
        knob3Param,
        runWindowParam,
        totalNumParams
    };
    
    
    

private:
    
    // raw Vars
    float m_knob1;
    float m_knob2;
    float m_knob3;
    
    float m_sampleRate;
    //cooked variables
    float m_fDelayTime;
    float m_fFeedback;
    float m_fWetLevel;
    
    
    //for our hanning window
    float PI;
    float m_fRunWindowL;
    float m_fRunWindowR;
    
    //for our interpolated delay time
    int m_fDelayTimeZ;
    
    FourPointDelay FourPDelayL;
    FourPointDelay FourPDelayR;
    
    HanningWindow HanningWindowL;
    HanningWindow HanningWindowR;
    
    TukeyWindow TukeyWindowL;
    TukeyWindow TukeyWindowR;
    
    
        
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FourPointDelayAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
