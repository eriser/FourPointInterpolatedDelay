/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
FourPointDelayAudioProcessorEditor::FourPointDelayAudioProcessorEditor (FourPointDelayAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p), button1("Run Window")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (295, 120);
    addAndMakeVisible(knob1 = new Slider("Knob - 1"));
    addAndMakeVisible(knob2 = new Slider("Knob - 2"));
    addAndMakeVisible(knob3 = new Slider("Knob - 3"));
    addAndMakeVisible(&button1);
    
    //this is the delay amount (m_fDelay_ms)
    knob1->setRange(0.0,1.0);
    knob1->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob1->setSliderStyle(Slider::Rotary);
    knob1->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob1->setColour(Slider::rotarySliderOutlineColourId, Colours::white);
    knob1->addListener(this);
    knob1->setBounds(10,18,63,63);
    
    //knob2 // Feedback Amount (m_f_FeedBack_pct)
    knob2->setRange(0.0,1.0);
    knob2->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob2->setSliderStyle(Slider::Rotary);
    knob2->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob2->setColour(Slider::rotarySliderOutlineColourId, Colours::white);
    knob2->addListener(this);
    knob2->setBounds(80,18,63,63);
    
    //knob3  // this is wet / dry (m_f_WetLevel_pct)
    knob3->setRange(0.0,1.0);
    knob3->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob3->setSliderStyle(Slider::Rotary);
    knob3->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob3->setColour(Slider::rotarySliderOutlineColourId, Colours::white);
    knob3->addListener(this);
    knob3->setValue(0.5,sendNotification);
    knob3->setBounds(150,18,63,63);
    
    //buttons
    button1.setBounds(220,40,60,30);
    button1.addListener(this);
    
    startTimer(50);
}

FourPointDelayAudioProcessorEditor::~FourPointDelayAudioProcessorEditor()
{
}

//==============================================================================
void FourPointDelayAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
    g.setColour(Colours::white);
    g.setFont (Font("Arial", 13, Font::bold + Font::italic));
    //knob text
    g.drawSingleLineText("Delay", 17, 90); //this is knob 1
    g.drawSingleLineText("Feedback", 87, 90); //this is knob 2
    g.drawSingleLineText("Wet / Dry", 157, 90); //this is knob 3
    //top rectangle
    g.fillRoundedRectangle(0,6,295,8,2);
    //lower rectangle & text
    g.fillRoundedRectangle(0,100,80,10,2);
    g.drawSingleLineText("Jacob Penn - Digital Delay MTIID", 83, 110);
    g.fillRoundedRectangle(270,100,27,10,2);
}

void FourPointDelayAudioProcessorEditor::timerCallback(){
    knob1->setValue(processor.getParameter(FourPointDelayAudioProcessor::knob1Param), NotificationType::dontSendNotification);
    knob2->setValue(processor.getParameter(FourPointDelayAudioProcessor::knob2Param), NotificationType::dontSendNotification);
    knob3->setValue(processor.getParameter(FourPointDelayAudioProcessor::knob3Param), NotificationType::dontSendNotification);
}

void FourPointDelayAudioProcessorEditor::sliderValueChanged(Slider* sliderThatWasChanged)
{
    if (sliderThatWasChanged == knob1)
    {
        processor.setParameterNotifyingHost(FourPointDelayAudioProcessor::knob1Param,(float)knob1->getValue());
    }
    else if (sliderThatWasChanged == knob2)
    {
        processor.setParameterNotifyingHost(FourPointDelayAudioProcessor::knob2Param,(float)knob2->getValue());
    }
    else if (sliderThatWasChanged == knob3)
    {
        processor.setParameterNotifyingHost(FourPointDelayAudioProcessor::knob3Param,(float)knob3->getValue());
    }
}

void FourPointDelayAudioProcessorEditor::buttonClicked(Button* button)
{
    if (&button1 == button)
    {
        processor.setParameterNotifyingHost(FourPointDelayAudioProcessor::runWindowParam,(float)1);
    }
}

